import json
import logging
import random
from unittest.mock import patch
import catalog.models as m
from flask import current_app

from tests.faker import fake
from tests.catalog.api import APITestCase

__author__ = 'longt'
_logger_ = logging.getLogger(__name__)


class TestAutoGenerateVariantSKU(APITestCase):
    ISSUE_KEY = 'CATALOGUE-1113'
    FOLDER = 'SkuList/Variants/Create'

    def url(self):
        return '/create_list_sku'

    def method(self):
        return 'POST'

    def setUp(self):
        self.created_by = 'longt'
        fake.init_editing_status()
        seller_id_new = fake.seller(manual_sku=False).id
        self.category = fake.category(is_active=True, seller_id=seller_id_new)
        self.master_category = fake.master_category(is_active=True)
        self.brand = fake.brand()
        self.tax = fake.tax(code="10")
        current_app.config.update(INTERNAL_HOST_URLS=['localhost'])

        self.patcher_seller = patch('catalog.services.seller.get_seller_by_id')
        self.mock_seller = self.patcher_seller.start()
        self.mock_seller.return_value = {'servicePackage': 'FBS', 'districtCode': '7901',
                                         'autoProcessOrder': {'isEnabled': False, 'needCheckStock': True,
                                                              'excludePaymentMethods': {}, 'excludeTerminals': {}},
                                         'displayName': 'Phong Vũ', 'accountID': 851049, 'code': 'PVU',
                                         'wardCode': '790104', 'provinceName': 'Thành phố Hồ Chí Minh',
                                         'saleCategoryIDS': {}, 'wardName': 'Phường Bến Thành',
                                         'districtName': 'Quận 1',
                                         'name': 'CÔNG TY CỔ PHẦN THƯƠNG MẠI DỊCH VỤ PHONG VŨ', 'id': 1, 'isActive': 1,
                                         'streetAddress': 'Tầng 5, 117,119,121 Nguyễn Du',
                                         'logoUrl': 'https://lh3.googleusercontent.com/qOnchEYD7No58bjEQs5pf_05IV-0DmoaCmEFXD007VHs5cn16LZ6PC98IlY3OiBL9UXsEwNzwiVHRrvSDMQ',
                                         'accountUpdated': 1,
                                         'internationalName': 'PHONG VU TRADING - SERVICE CORPORATION',
                                         'provinceCode': '79', 'isAutoGeneratedSKU': 1, 'usingSystemCategory': 0,
                                         'fullAddress': 'Tầng 5, 117,119,121 Nguyễn Du, Phường Bến Thành, Quận 1, Thành phố Hồ Chí Minh',
                                         'email': 'cskh@phongvu.vn', 'slogan': None, 'usingGoodsManagementModules': 1,
                                         'phoneNumber': '02862908777', 'taxIDNumber': '0304998358',
                                         'foundingDate': '2007-05-30', 'brcDate': '2007-05-30', 'brcCode': '0304998358'}

    def tearDown(self):
        current_app.config.update(INTERNAL_HOST_URLS=[])

    def __init_attribute_set(self, is_variation=1):
        self.attribute_set = fake.attribute_set()
        attribute_group = fake.attribute_group(
            set_id=self.attribute_set.id,
            system_group=False
        )
        self.attributes = [
            fake.attribute(
                code='s' + str(i),
                value_type='selection',
                is_none_unit_id=True
            ) for i in range(1, 3)
        ]

        self.attribute_options = [
            fake.attribute_option(self.attributes[0].id, value='Vàng'),
            fake.attribute_option(self.attributes[0].id, value='Đỏ'),
            fake.attribute_option(self.attributes[1].id, value='S'),
            fake.attribute_option(self.attributes[1].id, value='XXL'),
        ]

        fake.attribute_group_attribute(
            attribute_id=self.attributes[0].id,
            group_ids=[attribute_group.id],
            is_variation=is_variation
        )
        fake.attribute_group_attribute(
            attribute_id=self.attributes[1].id,
            group_ids=[attribute_group.id],
            is_variation=is_variation
        )

    def __init_uom(self):
        self.uom_attribute_group = fake.attribute_group(
            set_id=self.attribute_set.id,
            system_group=True
        )
        self.uom_attribute = fake.attribute(
            code='uom',
            value_type='selection',
            group_ids=[self.uom_attribute_group.id],
            is_variation=1
        )
        self.uom_ratio_attribute = fake.attribute(
            code='uom_ratio',
            value_type='text',
            group_ids=[self.uom_attribute_group.id],
            is_variation=1
        )
        m.db.session.add(self.uom_attribute)
        m.db.session.commit()
        self.uom_attr_options = [
            fake.attribute_option(self.uom_attribute.id, value='Cái'),
            fake.attribute_option(self.uom_attribute.id, value='Chiếc'),
            fake.attribute_option(self.uom_attribute.id, value='Cái')
        ]
        self.ratio_attr_options = [
            fake.attribute_option(self.uom_ratio_attribute.id, value='1.0'),
            fake.attribute_option(self.uom_ratio_attribute.id, value='2.0'),
            fake.attribute_option(self.uom_ratio_attribute.id, value='0.5')
        ]

    def __init_products(self, update=True):
        if update:
            self.product = fake.product(
                category_id=self.category.id,
                master_category_id=self.master_category.id,
                created_by=self.created_by,
                attribute_set_id=self.attribute_set.id)
            self.product_category = fake.product_category(
                product_id=self.product.id,
                category_id=self.category.id
            )
            self.payload = {
                'productId': self.product.id,
            }
        else:
            self.payload = {
                'taxInCode': self.tax.code,
                'productName': fake.text(),
                'categoryId': self.category.id,
                'brandId': self.brand.id,
                'providerId': 2,
                'masterCategoryId': self.master_category.id,
                'model': fake.text(),
                'warrantyMonths': fake.integer(max=12)
            }
        self.payload = {
            'createdBy': self.created_by,
            'sellerId': self.category.seller_id,
            'attributeSetId': self.attribute_set.id,
            **self.payload
        }

    def __init_variants(self, is_variation=False, count=1, update=True):
        self.payload_variants = []
        for index in range(count):
            variant = {}
            if not update:
                if not is_variation:
                    variant = {
                        'uomId': self.uom_attr_options[index].id,
                        'uomRatio': self.ratio_attr_options[index].value,
                        'attributes': [{
                            'id': self.attributes[0].id,
                            'value': str(self.attribute_options[index].id)
                        }, {
                            'id': self.attributes[1].id,
                            'value': str(self.attribute_options[index + 2].id)
                        }]
                    }
                    self.payload_variants.append(variant)
                else:
                    for index_2 in range(len(self.uom_attr_options)):
                        variant_2 = {
                            'uomId': self.uom_attr_options[index_2].id,
                            'uomRatio': self.ratio_attr_options[index_2].value,
                            'attributes': [{
                                'id': self.attributes[0].id,
                                'value': str(self.attribute_options[index].id)
                            }, {
                                'id': self.attributes[1].id,
                                'value': str(self.attribute_options[index + 2].id)
                            }]
                        }
                        self.payload_variants.append(variant_2)
            else:
                product_variant = fake.product_variant(
                    product_id=self.product.id,
                    uom_option_value=self.uom_attr_options[index].id,
                    uom_ratio_value=self.ratio_attr_options[index].value
                )
                variant['variantId'] = product_variant.id
                self.payload_variants.append(variant)

    def __init_skus(self, update=True, **kwargs):
        for variant in self.payload_variants:
            if not update:
                variant['sku'] = {
                    'images': [],
                    'trackingType': False,
                    'expiryTracking': False,
                    'daysBeforeExpLock': fake.integer(),
                    'productType': random.choice(['product', 'consu'])
                }
            else:
                sku = fake.sellable_product(variant_id=variant['variantId'], seller_id=self.category.seller_id,
                                            **kwargs)
                fake.product_variant_images(variant_id=sku.variant_id)
                variant['sku'] = {
                    'sku': sku.sku
                }

    def __init_payload(self,
                       count=1, is_variation=False,
                       update_product=True, update_variant=True, update_sku=False, **kwargs):
        self.payload = {}
        self.__init_attribute_set(is_variation)
        self.__init_uom()
        self.__init_products(update=update_product)
        self.__init_variants(is_variation=is_variation, update=update_variant, count=count)
        self.__init_skus(update=update_sku, **kwargs)

        self.payload = {
            **self.payload,
            'variants': self.payload_variants
        }
        return self.payload

    def test_passEmptySellerSkuAndNotManualSku(self):
        self.__init_payload(count=2, update_sku=False, update_variant=False, is_variation=True)
        code, body = self.call_api(self.payload)
        self.assertEqual(200, code)

