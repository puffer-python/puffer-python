# coding=utf-8
from unittest.mock import patch

import sqlalchemy as sa

from catalog.services.imports.template import TemplateService
from tests.catalog.api import APITestCase
from tests.faker import fake
from catalog import models
from tests import logged_in_user


class GenerateImportProductTemplateTestCase(APITestCase):
    ISSUE_KEY = 'CATALOGUE-389'
    FOLDER = '/CreateProductTemplate/Generate'

    def setUp(self):
        self.seller = fake.seller(
            manual_sku=True,
            is_manage_price=True
        )
        self.user = fake.iam_user(seller_id=self.seller.id)
        self.terminals = [fake.terminal(seller_id=self.user.seller_id) for _ in range(5)]
        self.attribute_set = fake.attribute_set()
        self.group = fake.attribute_group(set_id=self.attribute_set.id)
        self.categories = [fake.category(
            is_active=True,
            seller_id=self.user.seller_id,
            attribute_set_id=self.attribute_set.id
        ) for _ in range(2)]

        self.default_platform_owner = fake.seller()
        platform_id = fake.integer()
        fake.platform_sellers(
            platform_id=platform_id,
            seller_id=self.seller.id,
            is_default=True
        )
        fake.platform_sellers(
            platform_id=platform_id,
            seller_id=self.default_platform_owner.id,
            is_owner=True
        )

        self.default_categories = [fake.category(
            is_active=True,
            seller_id=self.default_platform_owner.id,
            attribute_set_id=self.attribute_set.id
        ) for _ in range(3)]
        sys_attr = fake.attribute(group_ids=[self.group.id])
        self.attributes = list()
        self.attributes.append(sys_attr)
        self.options = dict()

        self.patcher_seller = patch('catalog.services.seller.get_seller_by_id')
        self.mock_seller = self.patcher_seller.start()
        self.mock_seller.return_value = {
            'isAutoGeneratedSKU': False,
        }

    def tearDown(self):
        self.patcher_seller.stop()

    def test_returnExcelFile__whenPassValidData(self):
        with logged_in_user(self.user):
            service = TemplateService.get_instance(
                import_type='create_product',
                attribute_set_id=self.attribute_set.id
            )

            offset = service.VAR_COL_OFFSET
            for _ in range(5):
                self.attributes.append(fake.attribute(
                    group_ids=[self.group.id],
                    value_type='selection'
                ))
                fake.attribute_group_attribute(
                    self.attributes[-1].id,
                    group_ids=[self.group.id],
                    is_variation=1
                )
                self.options[self.attributes[-1].id] = list()
                for _ in range(3):
                    self.options[self.attributes[-1].id].append(
                        fake.attribute_option(self.attributes[-1].id)
                    )
            wb = service.generate_general_product_template()
            n_attrs = models.AttributeGroupAttribute.query.join(
                models.AttributeGroup,
                models.AttributeGroup.id == models.AttributeGroupAttribute.attribute_group_id
            ).filter(
                models.AttributeGroup.attribute_set_id == self.attribute_set.id,
            ).count() + 1 # cột hình ảnh
            hash_map = dict()
            for attr in self.attributes:
                hash_map[attr.display_name] = 1

            for idx in range(len(self.default_categories)):
                category_cell = wb.worksheets[1]._cells[(idx+2, 2)]
                category_expected = "=>".join([self.default_categories[idx].code, self.default_categories[idx].name])
                assert category_cell.value == category_expected

            for idx in range(len(self.attributes)):
                attribute_col = wb['Import_SanPham'][service.TITLE_ROW_OFFSET][offset + idx - 1]
                assert attribute_col.value in hash_map
                assert attribute_col.font.color.rgb != 'FFFF0000'

            sku_offset = offset + n_attrs - 1 + 2       # `+2` for uom and uom_ratio
            sku_col = wb['Import_SanPham'][service.TITLE_ROW_OFFSET][sku_offset]
            assert sku_col.value.lower() == 'seller sku'
            assert sku_col.font.color.rgb == 'FFFF0000'

            assert 'COMBO' not in wb['Import_SanPham'][service.TITLE_ROW_OFFSET+2][0].value
            self.assertFalse(bool(wb['DuLieuMau'][5][0].value))

    def test_disableSKUColumn__whenSellerUseManualSKU(self):
        self.mock_seller.return_value = {
            'isAutoGeneratedSKU': True,
        }
        with logged_in_user(self.user):
            self.seller.manual_sku = False
            models.db.session.commit()

            service = TemplateService.get_instance(
                import_type='create_product',
                attribute_set_id=self.attribute_set.id
            )
            wb = service.generate_general_product_template()
            n = len(wb['Import_SanPham'][service.TITLE_ROW_OFFSET])
            for i in range(1, n):
                col_value = wb['Import_SanPham'][service.TITLE_ROW_OFFSET][i].value
                if col_value:
                    assert not col_value.lower() == 'seller_sku'
