# coding=utf-8
from unittest.mock import patch

from tests import logged_in_user
from tests.catalog.api import APITestCase
from tests.faker import fake


class GetCreateProductBasicInfoTemplate(APITestCase):
    ISSUE_KEY = 'CATALOGUE-346'
    FOLDER = '/Import/GetCreateProductBasicInfoTemplate'

    def url(self):
        return '/import?type=create_product_basic_info'

    def method(self):
        return 'GET'

    def setUp(self):
        self.seller = fake.seller(
            manual_sku=True,
            is_manage_price=True
        )
        self.user = fake.iam_user(seller_id=self.seller.id)
        self.attribute_set = fake.attribute_set()
        self.fake_uom(attribute_set=self.attribute_set)
        self.group = fake.attribute_group(set_id=self.attribute_set.id)

        self.patcher_seller = patch('catalog.services.seller.get_seller_by_id')
        self.mock_seller = self.patcher_seller.start()
        self.mock_seller.return_value = {
            'isAutoGeneratedSKU': False,
            'usingGoodsManagementModules': False
        }

        self.patcher_send_file = patch('catalog.services.imports.template.TemplateCreateProductBasicInfo.send_file')
        self.mock_send_file = self.patcher_send_file.start()
        self.mock_send_file.return_value = {}

    def fake_uom(self, attribute_set):
        uom_attribute_group = fake.attribute_group(set_id=attribute_set.id, system_group=True)
        fake.attribute(
            code='uom',
            value_type='selection',
            group_ids=[uom_attribute_group.id],
            is_variation=1
        )
        fake.attribute(
            code='uom_ratio',
            value_type='text',
            group_ids=[uom_attribute_group.id],
            is_variation=0
        )

    def tearDown(self):
        self.patcher_seller.stop()
        self.patcher_send_file.stop()

    def test_200_successfully(self):
        with logged_in_user(self.user):
            code, body = self.call_api()

            self.assertEqual(code, 200)
            self.mock_send_file.assert_called_once()

    def test_500_fileNotFound(self):
        """
        assume that this case never happens
        """
        self.assertTrue(True)
